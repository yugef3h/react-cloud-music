{"version":3,"sources":["main.js"],"names":[],"mappings":";AAAA;AACA;AACA,OAAO,GAAP,MAAgB,KAAhB;AACA,OAAO,GAAP,MAAgB,OAAhB;AACA,OAAO,MAAP,MAAmB,UAAnB;;AAEA,MAAM,QAAN,CAAe,eAAf,GAA+B,IAA/B,C,CAAsC;AACtC,MAAM,QAAN,CAAe,OAAf,GAAyB,IAAzB;AACA,MAAM,QAAN,CAAe,OAAf,GAAyB,uBAAzB,C,CAAkD;AAClD;AACA,IAAI,SAAJ,CAAc,KAAd,GAAsB,KAAtB;AACA,IAAI,MAAJ,CAAW,aAAX,GAA2B,KAA3B;;AAEA;AACA,MAAM,YAAN,CAAmB,OAAnB,CAA2B,GAA3B,CACE,kBAAU;AACR;AACA;AACA;AACA,MAAG,aAAa,OAAb,CAAqB,OAArB,CAAH,EAAiC;AAC/B,WAAO,OAAP,CAAe,aAAf,GAA+B,YAAY,aAAa,OAAb,CAAqB,OAArB,CAA3C;AACD;AACD,SAAO,MAAP;AACD,CATH,EAUE,eAAO;AACL,SAAO,SAAQ,MAAR,CAAe,GAAf,CAAP;AACD,CAZH;AAcA;AACA,MAAM,YAAN,CAAmB,QAAnB,CAA4B,GAA5B,CAAiC,eAAO;AACpC,SAAO,GAAP;AACD,CAFH,EAGE,iBAAS;AACP,MAAI,MAAM,QAAV,EAAoB;AAClB,YAAQ,MAAM,QAAN,CAAe,MAAvB;AACE,WAAK,GAAL;AACE;AACA,eAAO,OAAP,CAAe;AACb,gBAAM,OADO;AAEb,iBAAO,EAAC,UAAU,OAAO,YAAP,CAAoB,QAA/B;AAFM,SAAf;AAHJ;AAQD;AACD,SAAO,SAAQ,MAAR,CAAe,MAAM,QAAN,CAAe,IAA9B,CAAP,CAXO,CAWsC;AAC9C,CAfH;AAgBA;AACA,IAAI,GAAJ,CAAQ;AACN,MAAI,MADE;AAEN,gBAFM;AAGN;AACA,UAAQ;AAAA,WAAK,EAAE,GAAF,CAAL;AAAA;AAJF,CAAR","file":"main-compiled.js","sourcesContent":["// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\n\naxios.defaults.withCredentials=true;  // 跨域保存session有用\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = \"http://localhost:3000\"; // 打包的时候直接删掉，默认基础路径在这里配置\n// 将 axios 赋值给 Vue，方便在子组件里面使用\nVue.prototype.$reqs = axios;\nVue.config.productionTip = false\n\n// 添加请求拦截器\naxios.interceptors.request.use(\n  config => {\n    //if(store.state.token){\n    //config.headers.Authorization = `token ${store.state.token}`;\n    //}\n    if(localStorage.getItem('token')){\n      config.headers.Authorization = 'Bearer ' + localStorage.getItem('token')\n    }\n    return config;\n  },\n  err => {\n    return Promise.reject(err);\n  }\n);\n// 添加响应拦截器\naxios.interceptors.response.use( res => {\n    return res;\n  },\n  error => {\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          // 返回 401 清除token信息并跳转到登录页面\n          router.replace({\n            path: 'login',\n            query: {redirect: router.currentRoute.fullPath}\n          })\n      }\n    }\n    return Promise.reject(error.response.data)   // 返回接口返回的错误信息\n  });\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  //store,\n  render: h => h(App)\n})\n"]}